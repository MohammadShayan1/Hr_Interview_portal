import axios from 'axios';
import { config } from '../config';
import logger from '../config/logger';

export interface JobDescriptionRequest {
  title: string;
  requirements: string;
}

export interface InterviewEvaluationRequest {
  transcript: string;
  jobTitle: string;
  candidateName: string;
}

export interface InterviewEvaluationResponse {
  score: number;
  strengths: string[];
  weaknesses: string[];
  recommendation: string;
  summary: string;
}

/**
 * Service to interact with OpenRouter.ai API
 */
class OpenRouterService {
  private apiKey: string;
  private apiUrl: string;
  
  constructor() {
    this.apiKey = config.openRouter.apiKey;
    this.apiUrl = config.openRouter.apiUrl;
  }
  
  /**
   * Generate a professional job description using AI
   */
  async generateJobDescription(data: JobDescriptionRequest): Promise<string> {
    try {
      // Validate API key
      if (!this.apiKey || this.apiKey === '' || this.apiKey === 'your-api-key-here') {
        logger.error('OpenRouter API key not configured');
        throw new Error('OpenRouter API key not configured. Please set OPENROUTER_API_KEY in your .env file.');
      }

      const prompt = `You are an expert HR professional. Generate a detailed, professional job description based on the following information:

Job Title: ${data.title}
Requirements: ${data.requirements}

Format the job description with the following sections:
- Job Title
- About the Role
- Key Responsibilities
- Required Qualifications
- Preferred Qualifications
- Benefits

Make it compelling and professional. Use proper formatting with bullet points where appropriate.`;

      logger.info('Calling OpenRouter API for job description generation', {
        apiKeyConfigured: !!this.apiKey,
        apiKeyLength: this.apiKey?.length,
        apiUrl: this.apiUrl,
        titleLength: data.title.length,
        requirementsLength: data.requirements.length,
      });
      
      const response = await axios.post(
        this.apiUrl,
        {
          model: 'openai/gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: 'You are an expert HR professional who creates compelling job descriptions.',
            },
            {
              role: 'user',
              content: prompt,
            },
          ],
          temperature: 0.7,
          max_tokens: 1500,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': config.backendUrl,
            'X-Title': 'HR Interview Portal',
          },
        }
      );
      
      logger.info('OpenRouter API response received', { 
        status: response.status,
        hasData: !!response.data,
        hasChoices: !!response.data?.choices,
        choicesLength: response.data?.choices?.length,
        fullResponse: JSON.stringify(response.data, null, 2)
      });
      
      if (!response.data || !response.data.choices || response.data.choices.length === 0) {
        logger.error('Invalid API response structure', { 
          fullData: JSON.stringify(response.data, null, 2),
          hasData: !!response.data,
          hasChoices: !!response.data?.choices,
          choicesLength: response.data?.choices?.length
        });
        throw new Error('Invalid response from AI service');
      }
      
      const generatedText = response.data.choices[0].message?.content;
      
      if (!generatedText) {
        logger.error('No content in API response', { 
          fullChoice: JSON.stringify(response.data.choices[0], null, 2),
          hasMessage: !!response.data.choices[0].message,
          hasContent: !!response.data.choices[0].message?.content
        });
        throw new Error('No content generated by AI service');
      }
      
      logger.info('Job description generated successfully', { length: generatedText.length });
      return generatedText;
    } catch (error: any) {
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        logger.error('OpenRouter API error response:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: JSON.stringify(error.response.data, null, 2),
          headers: error.response.headers,
        });
      } else if (error.request) {
        // The request was made but no response was received
        logger.error('OpenRouter API no response:', {
          message: 'No response received from API',
          request: error.request,
        });
      } else {
        // Something happened in setting up the request that triggered an Error
        logger.error('OpenRouter API request setup error:', {
          message: error.message,
          stack: error.stack,
        });
      }
      throw new Error('Failed to generate job description');
    }
  }
  
  /**
   * Evaluate interview transcript and generate report
   */
  async evaluateInterview(
    data: InterviewEvaluationRequest
  ): Promise<InterviewEvaluationResponse> {
    try {
      const prompt = `You are an expert HR interviewer. Analyze the following interview transcript and provide a comprehensive evaluation.

Job Title: ${data.jobTitle}
Candidate Name: ${data.candidateName}

Interview Transcript:
${data.transcript}

Provide a JSON response with the following structure:
{
  "score": <number between 0-100>,
  "strengths": [<array of 3-5 key strengths>],
  "weaknesses": [<array of 2-4 areas for improvement>],
  "recommendation": "<HIRE, MAYBE, or REJECT with brief explanation>",
  "summary": "<2-3 sentence overall assessment>"
}`;

      const response = await axios.post(
        this.apiUrl,
        {
          model: 'openai/gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: 'You are an expert HR interviewer who evaluates candidates objectively and provides actionable feedback. Always respond with valid JSON only.',
            },
            {
              role: 'user',
              content: prompt,
            },
          ],
          temperature: 0.5,
          max_tokens: 1000,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
        }
      );
      
      const evaluation = JSON.parse(response.data.choices[0].message.content);
      logger.info('Interview evaluation completed successfully');
      return evaluation;
    } catch (error) {
      logger.error('Error evaluating interview:', error);
      throw new Error('Failed to evaluate interview');
    }
  }
}

export default new OpenRouterService();
