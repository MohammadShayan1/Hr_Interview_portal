import { GoogleGenerativeAI } from '@google/generative-ai';
import { config } from '../config';
import logger from '../config/logger';

export interface JobDescriptionRequest {
  title: string;
  requirements: string;
}

export interface InterviewEvaluationRequest {
  transcript: string;
  jobTitle: string;
  candidateName: string;
}

export interface InterviewEvaluationResponse {
  score: number;
  strengths: string[];
  weaknesses: string[];
  recommendation: string;
  summary: string;
}

/**
 * Service to interact with Google Gemini AI API
 * Free tier: 15 RPM, 1500 requests/day - No credit card required!
 */
class GeminiService {
  private genAI: GoogleGenerativeAI | null = null;
  private model: any = null;
  
  constructor() {
    this.initialize();
  }
  
  private initialize() {
    try {
      const apiKey = config.gemini?.apiKey || process.env.GEMINI_API_KEY;
      
      if (!apiKey || apiKey === '' || apiKey === 'your-gemini-api-key-here') {
        logger.warn('Gemini API key not configured. AI features will be disabled.');
        return;
      }
      
      this.genAI = new GoogleGenerativeAI(apiKey);
      // Using Gemini 1.5 Flash - Fast and free!
      this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
      
      logger.info('Gemini AI service initialized successfully');
    } catch (error) {
      logger.error('Failed to initialize Gemini AI service:', error);
    }
  }
  
  private checkInitialized() {
    if (!this.genAI || !this.model) {
      const errorMsg = 'üîë Gemini API key not configured!\n\n' +
        'üìù Steps to fix:\n' +
        '1. Get FREE API key: https://aistudio.google.com/\n' +
        '2. Add to Railway: Variables ‚Üí GEMINI_API_KEY\n' +
        '3. Redeploy\n\n' +
        'Current status: API key is ' + (process.env.GEMINI_API_KEY ? 'SET but invalid' : 'NOT SET');
      logger.error(errorMsg);
      throw new Error('Gemini API key not configured. Get your free API key at: https://aistudio.google.com/');
    }
  }
  
  /**
   * Generate a professional job description using Gemini AI
   */
  async generateJobDescription(data: JobDescriptionRequest): Promise<string> {
    try {
      this.checkInitialized();
      
      const prompt = `You are an expert HR professional. Generate a detailed, professional job description in HTML format based on the following information:

Job Title: ${data.title}
Requirements: ${data.requirements}

Format the job description with the following sections using proper HTML tags:
- Use <h2> for section headings
- Use <p> for paragraphs
- Use <ul> and <li> for bullet points
- Use <strong> for emphasis

Include these sections:
1. About the Role
2. Key Responsibilities (as bullet points)
3. Required Qualifications (as bullet points)
4. Preferred Qualifications (as bullet points)
5. Benefits (as bullet points)

Make it compelling and professional. Return ONLY the HTML content without markdown code blocks.`;

      logger.info('Calling Gemini API for job description generation', {
        title: data.title,
        requirementsLength: data.requirements.length,
      });
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const generatedText = response.text();
      
      if (!generatedText) {
        logger.error('No content generated by Gemini');
        throw new Error('No content generated by AI service');
      }
      
      // Clean up markdown code blocks if present
      let cleanedText = generatedText.trim();
      if (cleanedText.startsWith('```html')) {
        cleanedText = cleanedText.replace(/^```html\n/, '').replace(/\n```$/, '');
      } else if (cleanedText.startsWith('```')) {
        cleanedText = cleanedText.replace(/^```\n/, '').replace(/\n```$/, '');
      }
      
      logger.info('Job description generated successfully', { 
        length: cleanedText.length,
        model: 'gemini-1.5-flash'
      });
      
      return cleanedText;
    } catch (error: any) {
      logger.error('Error generating job description with Gemini:', {
        message: error.message,
        stack: error.stack,
      });
      throw new Error('Failed to generate job description: ' + error.message);
    }
  }
  
  /**
   * Evaluate interview transcript and generate report using Gemini AI
   */
  async evaluateInterview(
    data: InterviewEvaluationRequest
  ): Promise<InterviewEvaluationResponse> {
    try {
      this.checkInitialized();
      
      const prompt = `You are an expert HR interviewer. Analyze the following interview transcript and provide a comprehensive evaluation.

Job Title: ${data.jobTitle}
Candidate Name: ${data.candidateName}

Interview Transcript:
${data.transcript}

Provide a JSON response with the following structure (respond with ONLY valid JSON, no markdown):
{
  "score": <number between 0-100>,
  "strengths": [<array of 3-5 key strengths>],
  "weaknesses": [<array of 2-4 areas for improvement>],
  "recommendation": "<HIRE, MAYBE, or REJECT with brief explanation>",
  "summary": "<2-3 sentence overall assessment>"
}`;

      logger.info('Calling Gemini API for interview evaluation', {
        jobTitle: data.jobTitle,
        candidateName: data.candidateName,
        transcriptLength: data.transcript.length,
      });
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      let responseText = response.text().trim();
      
      // Clean up markdown code blocks if present
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/^```json\n/, '').replace(/\n```$/, '');
      } else if (responseText.startsWith('```')) {
        responseText = responseText.replace(/^```\n/, '').replace(/\n```$/, '');
      }
      
      const evaluation = JSON.parse(responseText);
      
      logger.info('Interview evaluation completed successfully', {
        score: evaluation.score,
        model: 'gemini-1.5-flash'
      });
      
      return evaluation;
    } catch (error: any) {
      logger.error('Error evaluating interview with Gemini:', {
        message: error.message,
        stack: error.stack,
      });
      throw new Error('Failed to evaluate interview: ' + error.message);
    }
  }
  
  /**
   * Generate interview questions based on job description
   */
  async generateInterviewQuestions(jobTitle: string, jobDescription: string, count: number = 5): Promise<string[]> {
    try {
      this.checkInitialized();
      
      const prompt = `You are an expert HR interviewer. Generate ${count} relevant interview questions for the following position:

Job Title: ${jobTitle}
Job Description: ${jobDescription}

Generate questions that assess:
- Technical skills
- Problem-solving abilities
- Cultural fit
- Experience and background

Return ONLY a JSON array of questions, no markdown:
["question 1", "question 2", ...]`;

      logger.info('Generating interview questions with Gemini', {
        jobTitle,
        count,
      });
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      let responseText = response.text().trim();
      
      // Clean up markdown code blocks
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/^```json\n/, '').replace(/\n```$/, '');
      } else if (responseText.startsWith('```')) {
        responseText = responseText.replace(/^```\n/, '').replace(/\n```$/, '');
      }
      
      const questions = JSON.parse(responseText);
      
      logger.info('Interview questions generated successfully', {
        count: questions.length,
      });
      
      return questions;
    } catch (error: any) {
      logger.error('Error generating interview questions:', error);
      throw new Error('Failed to generate interview questions: ' + error.message);
    }
  }
}

export default new GeminiService();
